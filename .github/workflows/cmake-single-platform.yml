# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Hello-world builder for Ubuntu-24-04

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: Debug

permissions:
  contents: write   # This is required to create/push the new git tag

jobs:
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v2
      - name: Install build dependencies
        run: sudo apt update -y && sudo apt install -y clang-format clang-tidy g++ cmake libboost-all-dev ninja-build libgtest-dev

      - name: Allow deploy scripts to execute
        shell: bash
        run: |
          chmod -R +x ./src/scripts 

      - name: Code Style check
        shell: bash
        run: ./src/scripts/formatter/format.sh check

      - name: Build
        # Tests are included in cmake.
        shell: bash
        run: |
          chmod -R +x ./src/scripts 
          ./src/scripts/deploy/deploy.sh --build-number=${{ github.run_number }} --ninja

#      std::from_chars has constexpr ctor only in C++23
#      clang-tidy-15 (most relevant available for now) can't work with c++23
#      - name: Run static analysis
#        run: ./src/scripts/static_analyzer/clang/static-analysis.sh

      - name: Show version variable
        run: |
          echo "Version is ${PACKAGE_VERSION}"

      - name: Create release artifacts
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PACKAGE_VERSION }}
          release_name: Release ${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./install/ipfilter-uvarenkov-${{ env.PACKAGE_VERSION }}.deb
          asset_name: ipfilter-uvarenkov-${{ env.PACKAGE_VERSION }}.deb
          asset_content_type: application/vnd.debian.binary-package


